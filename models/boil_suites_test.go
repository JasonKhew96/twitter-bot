// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Images", testImages)
	t.Run("Tweets", testTweets)
	t.Run("Unfolloweds", testUnfolloweds)
}

func TestDelete(t *testing.T) {
	t.Run("Images", testImagesDelete)
	t.Run("Tweets", testTweetsDelete)
	t.Run("Unfolloweds", testUnfollowedsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Images", testImagesQueryDeleteAll)
	t.Run("Tweets", testTweetsQueryDeleteAll)
	t.Run("Unfolloweds", testUnfollowedsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Images", testImagesSliceDeleteAll)
	t.Run("Tweets", testTweetsSliceDeleteAll)
	t.Run("Unfolloweds", testUnfollowedsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Images", testImagesExists)
	t.Run("Tweets", testTweetsExists)
	t.Run("Unfolloweds", testUnfollowedsExists)
}

func TestFind(t *testing.T) {
	t.Run("Images", testImagesFind)
	t.Run("Tweets", testTweetsFind)
	t.Run("Unfolloweds", testUnfollowedsFind)
}

func TestBind(t *testing.T) {
	t.Run("Images", testImagesBind)
	t.Run("Tweets", testTweetsBind)
	t.Run("Unfolloweds", testUnfollowedsBind)
}

func TestOne(t *testing.T) {
	t.Run("Images", testImagesOne)
	t.Run("Tweets", testTweetsOne)
	t.Run("Unfolloweds", testUnfollowedsOne)
}

func TestAll(t *testing.T) {
	t.Run("Images", testImagesAll)
	t.Run("Tweets", testTweetsAll)
	t.Run("Unfolloweds", testUnfollowedsAll)
}

func TestCount(t *testing.T) {
	t.Run("Images", testImagesCount)
	t.Run("Tweets", testTweetsCount)
	t.Run("Unfolloweds", testUnfollowedsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Images", testImagesHooks)
	t.Run("Tweets", testTweetsHooks)
	t.Run("Unfolloweds", testUnfollowedsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Images", testImagesInsert)
	t.Run("Images", testImagesInsertWhitelist)
	t.Run("Tweets", testTweetsInsert)
	t.Run("Tweets", testTweetsInsertWhitelist)
	t.Run("Unfolloweds", testUnfollowedsInsert)
	t.Run("Unfolloweds", testUnfollowedsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Images", testImagesReload)
	t.Run("Tweets", testTweetsReload)
	t.Run("Unfolloweds", testUnfollowedsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Images", testImagesReloadAll)
	t.Run("Tweets", testTweetsReloadAll)
	t.Run("Unfolloweds", testUnfollowedsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Images", testImagesSelect)
	t.Run("Tweets", testTweetsSelect)
	t.Run("Unfolloweds", testUnfollowedsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Images", testImagesUpdate)
	t.Run("Tweets", testTweetsUpdate)
	t.Run("Unfolloweds", testUnfollowedsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Images", testImagesSliceUpdateAll)
	t.Run("Tweets", testTweetsSliceUpdateAll)
	t.Run("Unfolloweds", testUnfollowedsSliceUpdateAll)
}
